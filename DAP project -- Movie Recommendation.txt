🎬 DAP Project — Movie Recommendation System
💡 Ý tưởng dự án
Chúng tôi xây dựng một hệ thống gợi ý phim cá nhân hóa cho người dùng. Người dùng có thể đăng nhập, đánh giá phim, và nhận đề xuất phim phù hợp dựa trên sở thích và hành vi đã thể hiện.

Hệ thống sẽ sử dụng kết hợp giữa:

✅ Collaborative Filtering (CF) – gợi ý dựa trên hành vi người dùng

✅ Content-Based Filtering (CBF) – gợi ý dựa trên nội dung phim

✅ Hybrid Recommender – kết hợp CF và CBF để đưa ra đề xuất tối ưu

🧩 Tính năng hệ thống
🔐 Đăng nhập người dùng
Thông tin tài khoản được lưu trong file dangnhap.json

Gồm các trường: loginid, password

Sau khi đăng nhập thành công, hệ thống sẽ ghi nhận userId để liên kết đánh giá

⭐ Đánh giá phim
Người dùng có thể chọn phim từ danh sách có sẵn và đánh giá (số sao)

Mỗi đánh giá sẽ được lưu vào file ratings.csv

Các đánh giá mới sẽ ảnh hưởng đến mô hình gợi ý CF trong các lần huấn luyện sau

🎯 Gợi ý phim (recommendation)
Gợi ý phim theo genres: khi người dùng chọn thể loại như Kinh dị, Hoạt hình, Hành động...

Hệ thống sử dụng mô hình:

CBF: tìm phim tương tự nội dung (diễn viên, nhà sản xuất, đạo diễn, thể loại)

CF: gợi ý phim được đánh giá cao bởi người dùng có hành vi giống mình

Hybrid: kết hợp điểm số giữa CBF và CF

📦 Cấu trúc dữ liệu
ratings.csv
Dữ liệu đánh giá người dùng, dùng cho CF
| userId | movieId | rating |
|--------|---------|--------|

movies.csv
Dữ liệu thông tin phim, dùng cho CBF
| movieId | title | genres | actors | director | producer |

dangnhap.json
Thông tin đăng nhập

json
Sao chép
Chỉnh sửa
{
  "vuminh": { "password": "1234", "id": 1 },
  "hoangvu": { "password": "abcd", "id": 2 }
}
🧹 Các bước xử lý dữ liệu
Bước 1: Làm sạch dữ liệu
Loại bỏ các dòng NaN, trùng lặp trong ratings.csv, movies.csv

Bước 2: One-hot encoding genres
Thể loại genres chuyển thành vector nhị phân như [1, 0, 1, 0, ...] để mô hình có thể xử lý

Bước 3: TF-IDF + vector hóa nội dung
Gộp các trường: actors, director, producer thành nội dung phim

Dùng TF-IDF để chuyển văn bản thành vector số thực

Bước 4: Cosine similarity
Tính độ tương đồng giữa các phim

Tạo ma trận similarity_matrix[i][j] thể hiện mức độ giống nhau giữa phim i và j

🤖 Bước train mô hình
1. Train CF – Collaborative Filtering (SVD)

from surprise import SVD, Dataset, Reader
Huấn luyện dựa trên dữ liệu ratings.csv

Dự đoán điểm cho các phim người dùng chưa xem

2. Train CBF – Content-Based Filtering


from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.metrics.pairwise import cosine_similarity
from scipy.sparse import hstack
Tính ma trận tương đồng dựa trên nội dung phim

3. Hybrid Model
Kết hợp score = α * CF_score + (1 - α) * CBF_score

Có thể thay đổi hệ số α để ưu tiên CBF hoặc CF

☁️ Phần mở rộng: Lưu dữ liệu vào PostgreSQL
Chuyển đổi hệ thống sang sử dụng PostgreSQL database thay vì file .csv:

Bảng	Trường chính	Mô tả
users	user_id, username, password	Thông tin người dùng
movies	movie_id, title, genres, actors, director, producer	Dữ liệu phim
ratings	rating_id, user_id, movie_id, rating, timestamp	Đánh giá phim của người dùng

💡 Điều này giúp hệ thống mở rộng lên nhiều người dùng, gợi ý thời gian thực qua API, tránh mất dữ liệu.

🚀 Deploy trên Streamlit
Giao diện gồm:

Form đăng nhập

Giao diện đánh giá phim

Nút “Gợi ý phim”

Bộ lọc thể loại (Checkbox hoặc Dropdown)


streamlit run dashboard.py
✅ Tổng kết
Thành phần	Công nghệ sử dụng
Đăng nhập	JSON (hoặc PostgreSQL)
Đánh giá	CSV hoặc DB
Mô hình gợi ý	SVD (CF), TF-IDF + cosine (CBF)
Giao diện	Streamlit
Lưu trữ	CSV hoặc PostgreSQL
